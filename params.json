{"name":"Puppet Enterprise and Partner Integration Demos","tagline":"Puppet Enterprise Demo Environment","body":"# Puppet Enterprise Demo Environment\r\n\r\n#### Table of Contents\r\n\r\n1. [Overview](#overview)\r\n2. [Quick Start](#quick-start)\r\n    * [Access the Puppet Enterprise Console](#access-the-puppet-enterprise-console)\r\n3. [Prerequisites](#prerequisites)\r\n4. [Selecting Demos](#selecting-demos)\r\n5. [Creating a New Demo](#creating-a-new-demo)\r\n    * [Adding VMs](#adding-vms)\r\n    * [Adding VM Roles](#adding-vm-roles)\r\n    * [Adding Vagrant Boxes](#adding-vagrant-boxes)\r\n    * [Modifying the PE Master](#modifying-the-pe-master)\r\n        * [Puppetfile](#puppetfile)\r\n    * [Using YAML ERB templates](#using-yaml-erb-templates)\r\n\r\n\r\n## Overview\r\n\r\nThis tool provides a quick way to bootstrap an example deployment of Puppet\r\nEnterprise, complete with a master and several managed nodes running different\r\noperating systems. It's intended to give you an easy way to demonstrate Puppet\r\nEnterprise, Puppet Apps, and partner integrations  on a single laptop without \r\nany outside infrastructure.\r\n\r\n## Quick Start\r\n\r\nThe following command will install Puppet, Virtualbox, Vagrant, and the\r\nnecessary vagrant plugins\r\n\r\n      $ curl https://raw.githubusercontent.com/puppetlabs-pmmteam/pe-demo-env/master/base/scripts/install_demo_environment.sh | bash\r\n\r\nOnce done, you can bring up a single master by running `vagrant up`\r\n\r\nIt's going to take a while for the VM to come up and be fully configured.\r\n\r\n## Prerequisites \r\n\r\n**Note, this section can be ignored if you followed the Quick Start section above.**\r\n\r\nThis tool is built on top of a few different technologies, mainly VirtualBox\r\nand Vagrant, so you'll need to ensure that those are present before you\r\ncontinue. You'll also need to have the Git tools installed to checkout the\r\nrepository. \r\n\r\n1. Install [Virtual Box](https://www.virtualbox.org/wiki/Downloads).\r\n2. Install [Vagrant](http://vagrantup.com/).\r\n3. Install the required Vagrant plugins:\r\n    * `$ vagrant plugin install oscar`\r\n    * `$ vagrant plugin install vagrant-hosts`\r\n    * `$ vagrant pluginugin install vagrant-reload`\r\n    * `$ vagrant plugin install vagrant-multiprovider-snap` (optional, but you won't have snapshot functionality if you don't install it)\r\n\r\n### Access the Puppet Enterprise Console\r\n\r\nYou'll be back at the command prompt, but the puppet master is still running in\r\nthe background. Before you can get to the console, you'll need to figure out\r\nwhere it is:\r\n\r\n        $ vagrant hosts list\r\n\r\nThe response should look something like `10.20.1.1 master`, meaning that the\r\n`master` VM has the IP address of `10.20.1.1`. Next, just point your browser to\r\n`https://10.20.1.1` (or whatever the actual IP address is) and log in with the\r\nusername `admin@puppetlabs.com`, password `puppetlabs`. Don't worry if you get\r\na warning about the security certificate; that really won't affect anything. \r\n\r\nWhen you log in, you may notice that there's just one node listed: `master`.\r\nNot a bad start, but also not a great example of Puppet in action. In the next\r\nsection, you'll add some additional nodes to manage.\r\n\r\n## Selecting Demos\r\n\r\nThe default demo consists of a single Puppet Enterprise monolithic master.  There\r\nare no agents nor any pre-canned demos for middleware, partner integrations, or\r\nuse cases.\r\n\r\nTo list available demo environments, use `vagrant demo list`.  This will give\r\nyou currently loaded demo environments as well as the ones that are available\r\nto select.\r\n\r\nTo select a demo, use `vagrant demo use demo_name`.  Multiple environments can\r\nbe selected by providing a comma separated list of all the environments you\r\nwant to use.  of the demos your want to run.\r\n\r\n        $ vagrant demo use demo_a,demo_b\r\n\r\nOnce done, you'll be able to use vagrant normally to start and provision the\r\nnew VMs.\r\n\r\n        $ vagrant status\r\n\r\n        master                    running (virtualbox)\r\n        wordpress                 not created (virtualbox)\r\n        cisco                     not created (virtualbox)\r\n\r\n## Creating a new demo\r\n\r\nTo create a new demo, just create a directory by the demo name in the project\r\nroot. Inside your demo directory, you'll specify a demo.yaml file, the VMs,\r\nroles, and Vagrant boxes you'll need to build your demo environment.\r\n\r\nIt is highly recommended that your demo inherit the base demo, which is just a\r\nPuppet Enterprise master, so you will just need to worry about any additional\r\nVMs you'll need, as well as any modifications to the PE master such as\r\nclassification rules.\r\n\r\n### demo.yaml\r\n\r\nIn your demo environment's directory, create a demo.yaml file.  This file will\r\nspecify all the metadata about your demo. All keys below are optional except\r\nthe directory key.\r\n\r\n         ---\r\n         demo:\r\n            demo_name:\r\n               inerits: base\r\n               description: \"My demo's description\"\r\n               directory: directory/relative/to/project/root\r\n               info_url: 'https://confluence.puppetlabs.com/demo/information'\r\n\r\n### Adding VMs\r\n\r\nIn your demo directory, create a **vms.yaml** file.  Inside, specify a list of\r\nall the VMs you'll need using a format something like this:\r\n\r\n        ---\r\n        vms:\r\n          - name: \"vm1\"\r\n            box:  \"puppetlabs/centos-7.0-64-nocm\"\r\n            roles: [ \"agent\" ]\r\n          - name: \"vm2\"\r\n            box:  \"puppetlabs/centos-7.0-64-nocm\"\r\n            roles: [ \"agent\", \"example_role2\" ]\r\n\r\n\r\n### Adding VM roles\r\n\r\nIn the demo directory, create a **roles.yaml** file. Inside, specify the list\r\nof roles using a format something like this: \r\n\r\n        ---\r\n        roles:\r\n          example_role:\r\n            private_networks:\r\n              - ip: '0.0.0.0'\r\n                auto_network: true\r\n            provisioners:\r\n              - type: hosts\r\n              - type: pe_bootstrap\r\n              - type: shell\r\n                inline: |-\r\n                  echo 'demo'\r\n\r\n### Adding vagrant boxes\r\n\r\nIn the demo directory, create a **boxes.yaml** file. Inside, specify the list\r\nof roles using a format something like this: \r\n\r\n        ---\r\n        boxes:\r\n          'rhel-70-x64-vbox-nocm': 'http://int-resources.ops.puppetlabs.net/vagrant/puppetless_boxes/rhel-70.virtualbox.box'\r\n\r\n### Modifying the PE master\r\n\r\nYou can specify Puppet code to run on the PE master. This is useful to create\r\nnode groups in the classifier, stage files and repositories, set up packages,\r\nand more.  Note this is entirely optional. \r\n\r\nIn your demo directory, create a directory called **puppet**. Inside the puppet\r\ndirectory, create a **manifests** directory. All Puppet manifests go here. No\r\nclassification is necesary.  When Puppet is run on the master, all .pp files in\r\nyour demo's manifests directory will be combined into a single manifest.  This\r\nmeans every .pp file can contain raw resources without any classes.\r\n\r\n#### Puppetfile\r\n\r\nIf your demo's Puppet manifests make use of modules, you can specify a\r\nPuppetfile in your demo's **puppet** directory. Note the Puppetfile only\r\nspecifies modules to be used when provsiioning your specific demo.  The modules\r\nwill not be installed on the master in a global modulepath.\r\n\r\n\r\n### Using YAML ERB templates\r\n\r\nSometimes you need to put some logic or environment variables into your yaml\r\nconfigs.  To do so, you can write an ERB template that outputs valid YAML for\r\nyour VMs, roles, boxes, etc.  Instead of using the .yaml file extension, using\r\n.yaml_erb file extension.  For example: **roles.yaml_erb**. It will\r\nautomatically be parsed as a template. As long as its result is valid YAML, it\r\nwill be treated as a static .yaml file. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}